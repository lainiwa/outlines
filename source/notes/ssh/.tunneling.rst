
Tunneling
#########
* A visual guide to SSH tunnels
    - `Article <https://robotmoon.com/ssh-tunnels/>`__
    - `HN <https://news.ycombinator.com/item?id=26053323>`__
* https://ittavern.com/visual-guide-to-ssh-tunneling-and-port-forwarding/
* https://iximiuz.com/en/posts/ssh-tunnels/
* https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Tunnels
* https://posts.specterops.io/offensive-security-guide-to-ssh-tunnels-and-proxies-b525cbd4d4c6
* https://medium.com/maverislabs/proxyjump-the-ssh-option-you-probably-never-heard-of-2d7e41d43464

Local Port Forwarding
=====================
* Accessing a remote service (redis, memcached, etc.) listening on internal IPs
* Locally accessing resources available on a private network
* Transparently proxying a request to a remote service

.. image:: imgs/forward_local.png
  :width: 400
  :target: https://unix.stackexchange.com/questions/46235/how-does-reverse-ssh-tunneling-work/118650#answer-118650

Examples::

    # Forwards connections to 127.0.0.1:8080 on your local system
    # to port 80 on example.org through ssh-server.
    # 127.0.0.1:8080 --> ssh-server --> example.org:80
    ssh -L   127.0.0.1:8080:example.org:80 ssh-server

    # Forwards connections to port 8080 on all interfaces on your local system
    # to example.org:80 through a tunnel to ssh-server.
    # *:8080 --> ssh-server --> example.org:80
    ssh -L             8080:example.org:80 ssh-server
    ssh -L           *:8080:example.org:80 ssh-server

    # Forwards connections to 192.168.0.1:5432 on your local system
    # to 127.0.0.1:5432 on ssh-server.
    # 192.168.0.1:5432 --> ssh-server --> 127.0.0.1:5432
    ssh -L 192.168.0.1:5432:127.0.0.1:5432 ssh-server

Remote Port Forwarding
======================
* Making a local development server available over a public network
* Granting IP-restricted access to a remote resource on a private network

.. image:: imgs/forward_remote.png
  :width: 400
  :target: https://unix.stackexchange.com/questions/46235/how-does-reverse-ssh-tunneling-work/118650#answer-118650

Examples::

    # Forwards traffic to all interfaces on port 8080 on ssh-server
    # to localhost port 80 on your local computer.
    # anyone --> ssh-server:8080 --> localhost:80
    ssh -R         8080:localhost:80 ssh-server

    # Forwards traffic to ssh-server:8080
    # to localhost:80 on your local system
    # while only allowing access from IP address 1.2.3.4.
    # 1.2.3.4 --> ssh-server:8080 --> localhost:80
    ssh -R 1.2.3.4:8080:localhost:80 ssh-server

    # Forwards traffic to all interfaces on ssh-server:8080
    # to localhost:80 on your local system.
    # From your local system, traffic is then forwarded to example.org:80.
    # anyone --> ssh-server:8080 --> example.org:80
    ssh -R         8080:example.org:80 ssh-server

Dynamic Port Forwarding
=======================
Dynamic port forwarding opens a SOCKS proxy on the SSH client that lets you forward TCP traffic through the SSH server to a remote host.

Examples::

    # Opens a SOCKS proxy on port 3000 of all interfaces on your local system.
    #         *:3000 --> ssh-server --> *:*
    ssh -D 3000 ssh-server

    # Opens a SOCKS proxy on 127.0.0.1:3000 on your local system.
    # 127.0.0.1:3000 --> ssh-server --> *:*
    ssh -D 127.0.0.1:3000 ssh-server

    # curl -x socks5://127.0.0.1:12345 https://curlmyip.net

Jump hosts and proxy commands
=============================
Transparently connecting to a remote host through intermediate hosts.

Examples::

    # Establishes an SSH connection with jump-host
    # and forwards TCP traffic to remote-host.
    # you --> user1@jump-host --> user2@remote-host
    ssh -J user1@jump-host user2@remote-host
    ssh -o "ProxyJump user1@jump-host" user2@remote-host

    # you --> jump-host1 --> jump-host2 --> ssh-server
    ssh -J jump-host1,jump-host2 ssh-server

    ssh -o ProxyCommand="nc -X 5 -x localhost:3000 %h %p" user@remote-host
