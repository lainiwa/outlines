
Logging and Debugging
#####################
* `Structured Logging in a Shell Script with jq <https://medium.com/@jesse.riddle/structured-logging-in-a-shell-script-with-jq-f7542a94a1f6>`_
* `COLODEBUG: a simple way to improve bash script debugging <https://johannes.truschnigg.info/writing/2021-12_colodebug/>`_
* `Shell Scripting: Expert Recipes for Linux, Bash, and More: logger <https://www.oreilly.com/library/view/shell-scripting-expert/9781118166321/c14-anchor-6.xhtml>`_
* `Simple bash debugger using trap DEBUG <https://selivan.github.io/2022/05/21/bash-debug.html>`_

Structured logging with jq:

.. code-block:: sh

    __log(){
      jq \
        --monochrome-output \
        --compact-output \
        --raw-output \
        --arg timestamp "$(date "+%Y%m%dT%H%M%S")" \
        --arg log_level "${1}" \
        --arg message   "${2}" \
         '.timestamp=$timestamp|.log_level=$log_level|.message=$message' \
         <<<'{}' >&2
    }

    __log "INFO" "Hello, World"

Print with a colon:

.. code-block:: sh

    if [[ -n ${COLODEBUG:-} && ${-} != *x* ]]; then
        :() {
          [[ ${1:--} != ::* ]] && return 0
          printf '%s\n' "${*}" >&2
        }
    fi

    : :: note this line
    : ::NOTICE::

    # This is an example comment
    : This is a colon comment
    : :: This is a more verbose colon comment

    # Example usage:
    # COLODEBUG=1 ./myscript.sh

Write logs to syslog/journald:

.. code-block:: sh

    logger -t checkfs -s -p user.err "Filesystem $filesystem is at $usage"
    # or, with long options:
    logger --tag checkfs --stderr --priority user.err "Filesystem $filesystem is at $usage"

Besides traps(handlers) for signals, bash have 4 special traps:

* ``EXIT`` to run on exit from the shell.
* ``RETURN`` to run each time a function or a sources script finishes.
* ``ERR`` to run each time command failure would cause the shell to exit if ``set -e`` is used.
* ``DEBUG`` to execute before every command.

The last one allows to create a simple debugger inside a bash script:

.. code-block:: sh

    function _trap_DEBUG() {
        echo "# $BASH_COMMAND";
        while read -r -e -p "debug> " _command; do
            if [ -n "$_command" ]; then
                eval "$_command";
            else
                break;
            fi;
        done
    }

    trap '_trap_DEBUG' DEBUG

You can change the ``set -x`` output format:

.. code-block:: sh

    # Enable verbose logging of the bash script
    PS4='+ ${BASH_SOURCE:-}:${FUNCNAME[0]:-}:L${LINENO:-}:   '
    set -x

Alternatives:

* `selivan/bash-debug <https://github.com/selivan/bash-debug>`_
* `bashdb <http://bashdb.sourceforge.net/>`_
