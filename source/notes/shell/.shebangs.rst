
Shebangs
########
* `What the #! shebang really does <https://dev.to/meleu/what-the-shebang-really-does-and-why-it-s-so-important-in-your-shell-scripts-2755>`_
* https://linuskarlsson.se/blog/shebang-shenanigans/


Python
======
* `dotbot <https://github.com/anishathalye/dotbot/blob/master/bin/dotbot>`_
* `SO: How to write a shebang line that will call either either python3 or python2 whichever is available <https://stackoverflow.com/questions/63360890/how-to-write-a-shebang-line-that-will-call-either-either-python3-or-python2-whic>`_

Pick python version before running:

From dotbot:

.. code-block:: py

    #!/usr/bin/env sh

    # This is a valid shell script and also a valid Python script. When this file
    # is executed as a shell script, it finds a python binary and executes this
    # file as a Python script, passing along all of the command line arguments.
    # When this file is executed as a Python script, it loads and runs Dotbot. This
    # is useful because we don't know the name of the python binary.

    ''':' # begin python string; this line is interpreted by the shell as `:`
    command -v python  >/dev/null 2>&1 && exec python  "$0" "$@"
    command -v python3 >/dev/null 2>&1 && exec python3 "$0" "$@"
    command -v python2 >/dev/null 2>&1 && exec python2 "$0" "$@"
    >&2 echo "error: cannot find python"
    exit 1
    '''
    # python code
    import sys, os

    ...

Version from SO:

.. code-block:: py

    #!/bin/bash
    '''':
    for interpreter in python3 python2 python
    do
        which $interpreter >/dev/null 2>&1 && exec $interpreter "$0" "$@"
    done
    echo "$0: No python could be found" >&2
    exit 1
    # '''


    import sys
    print(sys.version)


nix-shell
=========
* https://nix.dev/tutorials/reproducible-scripts

My shebang for running things in nix-shell
and failing back to bash if no nix-shell is available:

.. code-block:: sh

    #!/usr/bin/env sh

    MYSCRIPT="$(mktemp)"
    trap 'rm -f -- "${MYSCRIPT}"' EXIT

    to_print=
    while IFS= read -r line; do
        [ "${line}" = '#!/usr/bin/env nix-shell' ] && to_print=yes
        [ -n "${to_print}" ] && printf '%s\n' "${line}"
    done <"$0" >"${MYSCRIPT}"
    # or, use sed instead of the above:
    # sed -n '/^#!\/usr\/bin\/env nix-shell$/,$p' "$0" >"${MYSCRIPT}"

    command -v nix-shell >/dev/null 2>&1 && exec nix-shell "${MYSCRIPT}" "$@"
    command -v bash      >/dev/null 2>&1 && exec bash      "${MYSCRIPT}" "$@"
    >&2 echo "error: cannot find nix-shell or bash"
    exit 1

    #!/usr/bin/env nix-shell
    #!nix-shell -i bash --pure
    #!nix-shell -p bash cacert curl jq python3Packages.xmljson
    #!nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/2a601aafdc5605a5133a2ca506a34a3a73377247.tar.gz

    curl https://github.com/NixOS/nixpkgs/releases.atom | xml2json | jq .


Executable sqlite3
==================
* `SQLite as a Shell Script <https://twosixtech.com/blog/sqlite-as-a-shell-script/>`_

Executable sqlite3 files:

.. code-block:: sh

    # Create database
    sqlite3 db.sqlite3 <<EOF
    create table echo
    (echo none primary key)
    without rowid;
    insert into echo values ("
    ls /
    ")
    EOF

    # Inspect it
    sqlite3 db.sqlite3 '.schema'
    xxd db.sqlite3 |grep -v ': [0 ]*  '

    busybox ash db.sqlite3

Executable Dockerfile
=====================
* `adtac/Dockerfile <https://gist.github.com/adtac/595b5823ef73b329167b815757bbce9f>`_
    - The ``env -S / --split-string`` is a rather recent GNU Coreutils addition
        + `SO provides some alternatives to the -S flag <https://unix.stackexchange.com/questions/399690/multiple-arguments-in-shebang/477651>`__
    - need to add ``|tail -n1`` to get only required image hash

.. code-block:: sh

    #!/usr/bin/env -S bash -c "docker run -p 8080:8080 -it --rm \$(docker build --progress plain -f \$0 . 2>&1 |tee /dev/stderr |grep -oP 'sha256:[0-9a-f]*' |tail -n1)"

    # syntax = docker/dockerfile:1.4.0

    FROM node:20
    ...

Executable Makefile
===================
* `How to "make" a shell script <https://www.humprog.org/~stephen/blog/2024/01/02/#make-shell>`_
    - mind that Makefile requires tabs and not spaces

.. code-block:: sh

    #!/usr/bin/env bash

    dummy=; define () { true; }
    define dummy
    echo "Hello from shell; PATH is ${PATH}"
    return 0 2>/dev/null || exit 0
    endef

    .PHONY: say-hello
    say-hello:
        @echo "Hello from make; makevar PATH is $(PATH), envvar PATH is $${PATH}"

Testable documentation with ``curl`` snippets
=============================================

.. code-block:: md

    # Executable document (via `bash README.md`):

        curl() { command curl -s --fail --retry 2 --retry-connrefused --connect-timeout 180 --max-time 360 -o/dev/null -w"%{http_code} %{url_effective}\n" "$@"; }
        jq() { grep --color=auto -E '^[^2].*|$'; }
        source <(grep -E "^(curl|\-d|'http)" "$0" |sed "s@https.*example\.com@${1:-https://example.com}@g")
        exit

    The block above enables calling:
    * `bash README.md`
    * `bash README.md http://localhost:8000`

    ## An example snippet
    ```shell
    curl -sSXGET -H 'Content-Type:application/json' -H 'Authorization: Bearer mytoken' \
    'https://example.com/myprefix' |jq
    ```

Other
=====
* `geon/shebang-abuse <https://github.com/geon/shebang-abuse>`_

Examples:

* delete.sh: ``#!/bin/rm``
* diary.sh: ``#!/usr/bin/nano +99999``
* disable.sh: ``#!/bin/chmod a-x``
* empties.sh: ``#!/bin/cp /dev/null``
* grow_a_tree_from_roots.sh: ``#!/bin/sudo``
* notebook.sh: ``#!/bin/tee -a``
* quine.sh: ``#!/bin/cat``
* selfls.sh: ``#!/bin/ls -l``
